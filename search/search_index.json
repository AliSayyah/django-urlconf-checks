{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Django UrlConf Checks \u00b6 django-urlconfchecks is a static type checker that checks your URLconf parameter types with argument types specified in associated views. It leverages the Django's static check system. Documentation GitHub PyPI Installation \u00b6 pip install django-urlconfchecks Usage \u00b6 You can use this package in different ways: As a Django app \u00b6 Add django_urlconfchecks to your INSTALLED_APPS list in your settings.py file. INSTALLED_APPS = [ ... 'django_urlconfchecks' , ] As a command line tool \u00b6 Run this command from the root of your project, were manage.py is located: $ urlconfchecks --help Usage: urlconfchecks [ OPTIONS ] Check all URLConfs for errors. Options: --version -u, --urlconf PATH Specify the URLconf to check. --install-completion Install completion for the current shell. --show-completion Show completion for the current shell, to copy it or customize the installation. --help Show this message and exit. As a pre-commit hook \u00b6 Add the following to your .pre-commit-config.yaml file: - repo : https://github.com/AliSayyah/django-urlconfchecks rev : 0.7.1 hooks : - id : django-urlconfchecks For more information, see the usage documentation . Features \u00b6 Using this package, URL pattern types will automatically be matched with associated views, and in case of mismatch, an error will be raised. Example: # urls.py from django.urls import path from . import views urlpatterns = [ path ( 'articles/<str:year>/' , views . year_archive ), path ( 'articles/<int:year>/<int:month>/' , views . month_archive ), path ( 'articles/<int:year>/<int:month>/<slug:slug>/' , views . article_detail ), ] # views.py def year_archive ( request , year : int ): pass def month_archive ( request , year : int , month : int ): pass def article_detail ( request , year : int , month : int , slug : str ): pass output will be: (urlchecker.E002) For parameter `year`, annotated type int does not match expected `str` from urlconf TODO Should only warn for each unhandled Converter once. Regex patterns perhaps? (only RoutePattern supported at the moment). Credits \u00b6 Luke Plant for providing the idea and the initial code. This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Home"},{"location":"#django-urlconf-checks","text":"django-urlconfchecks is a static type checker that checks your URLconf parameter types with argument types specified in associated views. It leverages the Django's static check system. Documentation GitHub PyPI","title":"Django UrlConf Checks"},{"location":"#installation","text":"pip install django-urlconfchecks","title":"Installation"},{"location":"#usage","text":"You can use this package in different ways:","title":"Usage"},{"location":"#as-a-django-app","text":"Add django_urlconfchecks to your INSTALLED_APPS list in your settings.py file. INSTALLED_APPS = [ ... 'django_urlconfchecks' , ]","title":"As a Django app"},{"location":"#as-a-command-line-tool","text":"Run this command from the root of your project, were manage.py is located: $ urlconfchecks --help Usage: urlconfchecks [ OPTIONS ] Check all URLConfs for errors. Options: --version -u, --urlconf PATH Specify the URLconf to check. --install-completion Install completion for the current shell. --show-completion Show completion for the current shell, to copy it or customize the installation. --help Show this message and exit.","title":"As a command line tool"},{"location":"#as-a-pre-commit-hook","text":"Add the following to your .pre-commit-config.yaml file: - repo : https://github.com/AliSayyah/django-urlconfchecks rev : 0.7.1 hooks : - id : django-urlconfchecks For more information, see the usage documentation .","title":"As a pre-commit hook"},{"location":"#features","text":"Using this package, URL pattern types will automatically be matched with associated views, and in case of mismatch, an error will be raised. Example: # urls.py from django.urls import path from . import views urlpatterns = [ path ( 'articles/<str:year>/' , views . year_archive ), path ( 'articles/<int:year>/<int:month>/' , views . month_archive ), path ( 'articles/<int:year>/<int:month>/<slug:slug>/' , views . article_detail ), ] # views.py def year_archive ( request , year : int ): pass def month_archive ( request , year : int , month : int ): pass def article_detail ( request , year : int , month : int , slug : str ): pass output will be: (urlchecker.E002) For parameter `year`, annotated type int does not match expected `str` from urlconf TODO Should only warn for each unhandled Converter once. Regex patterns perhaps? (only RoutePattern supported at the moment).","title":"Features"},{"location":"#credits","text":"Luke Plant for providing the idea and the initial code. This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Credits"},{"location":"changelog/","text":"Changelog \u00b6 [0.1.0] - 2022-01-28 \u00b6 Added \u00b6 First release on PyPI. [0.2.0] - 2022-01-29 \u00b6 Added \u00b6 Added the actual functionality. updated dependencies. [0.3.0] - 2022-02-04 \u00b6 Changed \u00b6 fixed a bug that caused the checks to not work. Package is functional now. [0.3.1] - 2022-02-07 \u00b6 Fixed \u00b6 fixed a dependency issue that caused the mkdocs-material-extensions to install as a runtime dependency. [0.4.0] - 2022-02-07 \u00b6 Changed \u00b6 Now, django_urlconfchecks is a Django app. This means that it can be installed as a Django app. For more information, see the documentation . [0.5.0] - 2022-02-21 \u00b6 Added \u00b6 Added two more ways to use the package: a CLI tool and a pre-commit hook . For more information, see the usage documentation . [0.6.0] - 2022-04-01 \u00b6 Fixed \u00b6 Fixed a bug that caused urlconfchecks to show warnings for Django's admin app. Now, admin app will be ignored. Courtesy @nightboard. [0.7.0] - 2022-08-11 \u00b6 Added \u00b6 Added fine-grained method for silencing errors. Courtesy @spookylukey [0.7.1] - 2022-08-11 \u00b6 Added \u00b6 Support subclasses of builtin converters. More tests. Cleanup output text to be more clear and informative.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#010---2022-01-28","text":"","title":"[0.1.0] - 2022-01-28"},{"location":"changelog/#added","text":"First release on PyPI.","title":"Added"},{"location":"changelog/#020---2022-01-29","text":"","title":"[0.2.0] - 2022-01-29"},{"location":"changelog/#added_1","text":"Added the actual functionality. updated dependencies.","title":"Added"},{"location":"changelog/#030---2022-02-04","text":"","title":"[0.3.0] - 2022-02-04"},{"location":"changelog/#changed","text":"fixed a bug that caused the checks to not work. Package is functional now.","title":"Changed"},{"location":"changelog/#031---2022-02-07","text":"","title":"[0.3.1] - 2022-02-07"},{"location":"changelog/#fixed","text":"fixed a dependency issue that caused the mkdocs-material-extensions to install as a runtime dependency.","title":"Fixed"},{"location":"changelog/#040---2022-02-07","text":"","title":"[0.4.0] - 2022-02-07"},{"location":"changelog/#changed_1","text":"Now, django_urlconfchecks is a Django app. This means that it can be installed as a Django app. For more information, see the documentation .","title":"Changed"},{"location":"changelog/#050---2022-02-21","text":"","title":"[0.5.0] - 2022-02-21"},{"location":"changelog/#added_2","text":"Added two more ways to use the package: a CLI tool and a pre-commit hook . For more information, see the usage documentation .","title":"Added"},{"location":"changelog/#060---2022-04-01","text":"","title":"[0.6.0] - 2022-04-01"},{"location":"changelog/#fixed_1","text":"Fixed a bug that caused urlconfchecks to show warnings for Django's admin app. Now, admin app will be ignored. Courtesy @nightboard.","title":"Fixed"},{"location":"changelog/#070---2022-08-11","text":"","title":"[0.7.0] - 2022-08-11"},{"location":"changelog/#added_3","text":"Added fine-grained method for silencing errors. Courtesy @spookylukey","title":"Added"},{"location":"changelog/#071---2022-08-11","text":"","title":"[0.7.1] - 2022-08-11"},{"location":"changelog/#added_4","text":"Support subclasses of builtin converters. More tests. Cleanup output text to be more clear and informative.","title":"Added"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/AliSayyah/django-urlconfchecks/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 django-UrlConfChecks could always use more documentation, whether as part of the official django-UrlConfChecks docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/AliSayyah/django-urlconfchecks/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up django-urlconfchecks for local development. Fork the django-urlconfchecks repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/django-urlconfchecks.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.7, 3.8, 3.9 and 3.10. Check https://github.com/AliSayyah/django-urlconfchecks/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_django_urlconfchecks.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/AliSayyah/django-urlconfchecks/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"django-UrlConfChecks could always use more documentation, whether as part of the official django-UrlConfChecks docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/AliSayyah/django-urlconfchecks/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up django-urlconfchecks for local development. Fork the django-urlconfchecks repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/django-urlconfchecks.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.7, 3.8, 3.9 and 3.10. Check https://github.com/AliSayyah/django-urlconfchecks/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_django_urlconfchecks.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install django-UrlConfChecks, run this command in your terminal: $ pip install django-urlconfchecks This is the preferred method to install django-UrlConfChecks, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for django-UrlConfChecks can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/AliSayyah/django-urlconfchecks Or download the tarball : $ curl -OJL https://github.com/AliSayyah/django-urlconfchecks/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install django-UrlConfChecks, run this command in your terminal: $ pip install django-urlconfchecks This is the preferred method to install django-UrlConfChecks, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for django-UrlConfChecks can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/AliSayyah/django-urlconfchecks Or download the tarball : $ curl -OJL https://github.com/AliSayyah/django-urlconfchecks/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 You can use this package in different ways: As a Django app \u00b6 Add django_urlconfchecks to your INSTALLED_APPS list in your settings.py file. INSTALLED_APPS = [ ... 'django_urlconfchecks' , ] Now, if there is any error, you can check it when you run python manage.py check or when your django server runs or reloads with python manage.py runserver . As a command line tool \u00b6 urlconfchecks uses the Typer module to parse command line arguments. Run this command from the root of your project, were manage.py is located: $ urlconfchecks --help Usage: urlconfchecks [ OPTIONS ] Check all URLConfs for errors. Options: --version -u, --urlconf PATH Specify the URLconf to check. --install-completion Install completion for the current shell. --show-completion Show completion for the current shell, to copy it or customize the installation. --help Show this message and exit. --urlconf is optional, and if not specified, app will try to find the manage.py in your current directory for accessing the main URLConf module. Example: $ urlconfchecks --urlconf my_project.urls Done. No errors found. As a pre-commit hook \u00b6 Make sure you have pre-commit installed and if not, install it with pip install pre-commit && pre-commit install . Then, add the following to your .pre-commit-config.yaml file: - repo : https://github.com/AliSayyah/django-urlconfchecks rev : 0.7.1 hooks : - id : django-urlconfchecks Run pre-commit run to check all URLConfs for errors. Silencing errors and warnings \u00b6 You can silence specific errors and warnings as described in the System check framework documentation . For example: SILENCED_SYSTEM_CHECKS = [ \"urlchecker.W003\u201c, ] However, this turns off the check for all view functions. Instead of this you can use the URLCONFCHECKS_SILENCED_VIEWS setting for more fine grained silencing. The value must be a dictionary: whose keys are fully qualified dotted paths to view functions or callables, with globbing syntax allowed, e.g. \"my_project.views.my_view\" or \"other_project.*\" whose values are comma separated lists of warning or error IDs (without the urlchecker prefix), e.g. \"E001,W003\u201d The default value of URLCONFCHECKS_SILENCED_VIEWS is below. If you override it in your settings.py , you will probably want to include the following and add more items: URLCONFCHECKS_SILENCED_VIEWS = { \"*.View.as_view.<locals>.view\" : \"W001\" , # CBVs \"django.views.generic.base.RedirectView\" : \"W001\" , \"django.contrib.*\" : \"W003\" , # admin etc. }","title":"Usage"},{"location":"usage/#usage","text":"You can use this package in different ways:","title":"Usage"},{"location":"usage/#as-a-django-app","text":"Add django_urlconfchecks to your INSTALLED_APPS list in your settings.py file. INSTALLED_APPS = [ ... 'django_urlconfchecks' , ] Now, if there is any error, you can check it when you run python manage.py check or when your django server runs or reloads with python manage.py runserver .","title":"As a Django app"},{"location":"usage/#as-a-command-line-tool","text":"urlconfchecks uses the Typer module to parse command line arguments. Run this command from the root of your project, were manage.py is located: $ urlconfchecks --help Usage: urlconfchecks [ OPTIONS ] Check all URLConfs for errors. Options: --version -u, --urlconf PATH Specify the URLconf to check. --install-completion Install completion for the current shell. --show-completion Show completion for the current shell, to copy it or customize the installation. --help Show this message and exit. --urlconf is optional, and if not specified, app will try to find the manage.py in your current directory for accessing the main URLConf module. Example: $ urlconfchecks --urlconf my_project.urls Done. No errors found.","title":"As a command line tool"},{"location":"usage/#as-a-pre-commit-hook","text":"Make sure you have pre-commit installed and if not, install it with pip install pre-commit && pre-commit install . Then, add the following to your .pre-commit-config.yaml file: - repo : https://github.com/AliSayyah/django-urlconfchecks rev : 0.7.1 hooks : - id : django-urlconfchecks Run pre-commit run to check all URLConfs for errors.","title":"As a pre-commit hook"},{"location":"usage/#silencing-errors-and-warnings","text":"You can silence specific errors and warnings as described in the System check framework documentation . For example: SILENCED_SYSTEM_CHECKS = [ \"urlchecker.W003\u201c, ] However, this turns off the check for all view functions. Instead of this you can use the URLCONFCHECKS_SILENCED_VIEWS setting for more fine grained silencing. The value must be a dictionary: whose keys are fully qualified dotted paths to view functions or callables, with globbing syntax allowed, e.g. \"my_project.views.my_view\" or \"other_project.*\" whose values are comma separated lists of warning or error IDs (without the urlchecker prefix), e.g. \"E001,W003\u201d The default value of URLCONFCHECKS_SILENCED_VIEWS is below. If you override it in your settings.py , you will probably want to include the following and add more items: URLCONFCHECKS_SILENCED_VIEWS = { \"*.View.as_view.<locals>.view\" : \"W001\" , # CBVs \"django.views.generic.base.RedirectView\" : \"W001\" , \"django.contrib.*\" : \"W003\" , # admin etc. }","title":"Silencing errors and warnings"}]}