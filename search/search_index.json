{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#django-urlconf-checks","title":"Django UrlConf Checks","text":"<p>django-urlconfchecks is a static type checker that checks your URLconf parameter types with argument types specified in associated views. It leverages the Django's static check system.</p> <ul> <li>Documentation</li> <li>GitHub</li> <li>PyPI</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install django-urlconfchecks\n</code></pre> <p>Python 3.8 or later is required. However, before Python 3.10 some checks relating to <code>Optional</code> types in view signatures are skipped due to stdlib limitations.</p>"},{"location":"#usage","title":"Usage","text":"<p>You can use this package in different ways:</p>"},{"location":"#as-a-django-app","title":"As a Django app","text":"<p>Add <code>django_urlconfchecks</code> to your <code>INSTALLED_APPS</code> list in your <code>settings.py</code> file.</p> <pre><code>    INSTALLED_APPS = [\n    ...\n    'django_urlconfchecks',\n]\n</code></pre>"},{"location":"#as-a-command-line-tool","title":"As a command line tool","text":"<p>Run this command from the root of your project, were <code>manage.py</code> is located:</p> <pre><code>$ urlconfchecks --help\n\n    Usage: urlconfchecks [OPTIONS]\n\n      Check all URLConfs for errors.\n\n    Options:\n      --version\n      -u, --urlconf PATH    Specify the URLconf to check.\n      --install-completion  Install completion for the current shell.\n      --show-completion     Show completion for the current shell, to copy it or\n                            customize the installation.\n      --help                Show this message and exit.\n</code></pre>"},{"location":"#as-a-pre-commit-hook","title":"As a pre-commit hook","text":"<p>Add the following to your <code>.pre-commit-config.yaml</code> file:</p> <pre><code>  - repo: https://github.com/AliSayyah/django-urlconfchecks\n    rev: v0.11.0\n    hooks:\n      - id: django-urlconfchecks\n</code></pre> <p>For more information, see the usage documentation.</p>"},{"location":"#features","title":"Features","text":"<p>Using this package, URL pattern types will automatically be matched with associated views, and in case of mismatch, an error will be raised.</p> <p>Example:</p> <pre><code># urls.py\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('articles/&lt;str:year&gt;/', views.year_archive),\n    path('articles/&lt;int:year&gt;/&lt;int:month&gt;/', views.month_archive),\n    path('articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug:slug&gt;/', views.article_detail),\n]\n</code></pre> <pre><code># views.py\n\ndef year_archive(request, year: int):\n    pass\n\n\ndef month_archive(request, year: int, month: int):\n    pass\n\n\ndef article_detail(request, year: int, month: int, slug: str):\n    pass\n</code></pre> <p>output will be:</p> <pre><code>(urlchecker.E002) For parameter `year`, annotated type int does not match expected `str` from urlconf\n</code></pre> <ul> <li>TODO:<ul> <li>Handle type checking parameterized generics e.g. <code>typing.List[int]</code>, <code>list[str]</code> etc.</li> <li>Should only warn for each unhandled Converter once.</li> <li>Regex patterns perhaps? (only RoutePattern supported at the moment).</li> </ul> </li> </ul>"},{"location":"#credits","title":"Credits","text":"<ul> <li>Luke Plant for providing the idea and the initial code.</li> <li>This package was created with Cookiecutter and   the waynerv/cookiecutter-pypackage project template.</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#010---2022-01-28","title":"[0.1.0] - 2022-01-28","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>First release on PyPI.</li> </ul>"},{"location":"changelog/#020---2022-01-29","title":"[0.2.0] - 2022-01-29","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Added the actual functionality.</li> <li>updated dependencies.</li> </ul>"},{"location":"changelog/#030---2022-02-04","title":"[0.3.0] - 2022-02-04","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>fixed a bug that caused the checks to not work. Package is functional now.</li> </ul>"},{"location":"changelog/#031---2022-02-07","title":"[0.3.1] - 2022-02-07","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>fixed a dependency issue that caused the <code>mkdocs-material-extensions</code> to install as a runtime dependency.</li> </ul>"},{"location":"changelog/#040---2022-02-07","title":"[0.4.0] - 2022-02-07","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Now, <code>django_urlconfchecks</code> is a Django app. This means that it can be installed as a Django app. For more   information, see the documentation.</li> </ul>"},{"location":"changelog/#050---2022-02-21","title":"[0.5.0] - 2022-02-21","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Added two more ways to use the package: a <code>CLI tool</code> and a <code>pre-commit hook</code>. For more information, see   the usage documentation.</li> </ul>"},{"location":"changelog/#060---2022-04-01","title":"[0.6.0] - 2022-04-01","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Fixed a bug that caused <code>urlconfchecks</code> to show warnings for Django's <code>admin</code> app. Now, <code>admin</code> app will be ignored.   Courtesy @nightboard.</li> </ul>"},{"location":"changelog/#070---2022-08-11","title":"[0.7.0] - 2022-08-11","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Added fine-grained method for silencing errors. Courtesy @spookylukey</li> </ul>"},{"location":"changelog/#071---2022-08-11","title":"[0.7.1] - 2022-08-11","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Support subclasses of builtin converters.</li> <li>More tests.</li> <li>Cleanup output text to be more clear and informative.</li> </ul>"},{"location":"changelog/#072---2022-08-12","title":"[0.7.2] - 2022-08-12","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Handle default arguments passed via path(kwargs). Courtesy @spookylukey</li> </ul>"},{"location":"changelog/#073---2022-08-25","title":"[0.7.3] - 2022-08-25","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Fixed an issue where default CBV silencing only worked for django 4</li> </ul>"},{"location":"changelog/#080---2022-09-16","title":"[0.8.0] - 2022-09-16","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Made error reporting of view reprs consistent with silencer.</li> <li>Correctly handle views with Optional arguments.</li> </ul>"},{"location":"changelog/#090---2023-02-10","title":"[0.9.0] - 2023-02-10","text":""},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Fixed crasher when urlconf has optional types. Courtesy @spookylukey</li> <li>added python 3.11 support</li> </ul>"},{"location":"changelog/#0100---2023-08-15","title":"[0.10.0] - 2023-08-15","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Handle cases involving <code>path</code> and <code>include</code>. Courtesy @spookylukey</li> </ul>"},{"location":"changelog/#0110---2024-02-27","title":"[0.11.0] - 2024-02-27","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Python 3.12 support</li> <li>Django 5 support</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Python 3.7 support</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/AliSayyah/django-urlconfchecks/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>django-UrlConfChecks could always use more documentation, whether as part of the official django-UrlConfChecks docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/AliSayyah/django-urlconfchecks/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>django-urlconfchecks</code> for local development.</p> <ol> <li>Fork the <code>django-urlconfchecks</code> repo on GitHub.</li> <li> <p>Clone your fork locally</p> <pre><code>$ git clone git@github.com:your_name_here/django-urlconfchecks.git\n</code></pre> </li> <li> <p>Ensure poetry is installed.</p> </li> <li> <p>Install dependencies and start your virtualenv:</p> <pre><code>$ poetry install -E test -E doc -E dev\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass the    tests, including testing other Python versions, with tox:</p> <pre><code>$ poetry run tox\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.8, 3.9, 3.10, 3.11 and 3.12. Check    https://github.com/AliSayyah/django-urlconfchecks/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<pre><code>$ poetry run pytest tests\n</code></pre> <p>To run a subset of tests.</p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run:</p> <pre><code>$ poetry run bump2version patch # possible: major / minor / patch\n$ git push\n$ git push --tags\n</code></pre> <p>GitHub Actions will then deploy to PyPI if tests pass.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install django-UrlConfChecks, run this command in your terminal:</p> <pre><code>$ pip install django-urlconfchecks\n</code></pre> <p>This is the preferred method to install django-UrlConfChecks, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for django-UrlConfChecks can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone git://github.com/AliSayyah/django-urlconfchecks\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/AliSayyah/django-urlconfchecks/tarball/master\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ pip install .\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#usage","title":"Usage","text":"<p>You can use this package in different ways:</p>"},{"location":"usage/#as-a-django-app","title":"As a Django app","text":"<p>Add <code>django_urlconfchecks</code> to your <code>INSTALLED_APPS</code> list in your <code>settings.py</code> file.</p> <pre><code>    INSTALLED_APPS = [\n    ...\n    'django_urlconfchecks',\n]\n</code></pre> <p>Now, if there is any error, you can check it when you run <code>python manage.py check</code> or when your django server runs or reloads with <code>python manage.py runserver</code>.</p>"},{"location":"usage/#as-a-command-line-tool","title":"As a command line tool","text":"<p><code>urlconfchecks</code> uses the <code>Typer</code> module to parse command line arguments.</p> <p>Run this command from the root of your project, were <code>manage.py</code> is located:</p> <pre><code>$ urlconfchecks --help\n\n    Usage: urlconfchecks [OPTIONS]\n\n      Check all URLConfs for errors.\n\n    Options:\n      --version\n      -u, --urlconf PATH    Specify the URLconf to check.\n      --install-completion  Install completion for the current shell.\n      --show-completion     Show completion for the current shell, to copy it or\n                            customize the installation.\n      --help                Show this message and exit.\n</code></pre> <p><code>--urlconf</code> is optional, and if not specified, app will try to find the manage.py in your current directory for accessing the main URLConf module.</p> <p>Example:</p> <pre><code>$ urlconfchecks --urlconf my_project.urls\n\n  Done. No errors found.\n</code></pre>"},{"location":"usage/#as-a-pre-commit-hook","title":"As a pre-commit hook","text":"<p>Make sure you have <code>pre-commit</code> installed and if not, install it with <code>pip install pre-commit &amp;&amp; pre-commit install</code>.</p> <p>Then, add the following to your <code>.pre-commit-config.yaml</code> file:</p> <pre><code>  - repo: https://github.com/AliSayyah/django-urlconfchecks\n    rev: v0.11.0\n    hooks:\n      - id: django-urlconfchecks\n</code></pre> <p>Run <code>pre-commit run</code> to check all URLConfs for errors.</p>"},{"location":"usage/#silencing-errors-and-warnings","title":"Silencing errors and warnings","text":"<p>You can silence specific errors and warnings as described in the System check framework documentation.</p> <p>For example:</p> <pre><code>SILENCED_SYSTEM_CHECKS = [\n    \"urlchecker.W003\u201c,\n]\n</code></pre> <p>However, this turns off the check for all view functions. Instead of this you can use the <code>URLCONFCHECKS_SILENCED_VIEWS</code> setting for more fine grained silencing. The value must be a dictionary:</p> <ul> <li> <p>whose keys are fully qualified dotted paths to view functions or callables,   with globbing syntax allowed, e.g. <code>\"my_project.views.my_view\"</code> or   <code>\"other_project.*\"</code></p> </li> <li> <p>whose values are comma separated lists of warning or error IDs (without the   <code>urlchecker</code> prefix), e.g. <code>\"E001,W003\u201d</code></p> </li> </ul> <p>The default value of <code>URLCONFCHECKS_SILENCED_VIEWS</code> is below. If you override it in your <code>settings.py</code>, you will probably want to include the following and add more items:</p> <pre><code>URLCONFCHECKS_SILENCED_VIEWS = {\n    \"*.View.as_view\": \"W001\",  # CBVs\n    \"django.views.generic.base.RedirectView\": \"W001\",\n    \"django.contrib.*\": \"W003\",  # admin etc.\n}\n</code></pre>"}]}